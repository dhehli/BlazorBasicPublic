@page "/Account/Login"
@using BlazorBasic.Components.Demo
@using BlazorBasic.Locales
@using Blazorise
@using NetliveComponents.Components.Tailwind
@using NetliveComponents.Components.Tailwind.Form
@using NetliveComponents.Models
@using System.ComponentModel.DataAnnotations

@inject IStringLocalizer<DemoForm> L
@inject IMessageLocalizerHelper<DemoForm> MessageLocalizer
@rendermode InteractiveServer

<NetliveHeading Size="NetliveHeadingSize.H1">
    @L["Title"]
</NetliveHeading>

<Validations Model="@formModel" @ref="@validations" Mode="ValidationMode.Auto" ValidateOnLoad="false">
    <AntiforgeryToken />
    <Blazorise.ValidationSummary />

    <CascadingValue Value="MessageLocalizer.Localize">

        <NetliveField Label="@L["NameLabel"]"
                      Placeholder="@L["NamePlaceholder"]"
                      @bind-CurrentValue="formModel.FirstName" />

        <NetliveField Label="@L["PasswordLabel"]"
                      InputType="NetliveInputType.Password"
                      Placeholder="@L["PasswordPlaceholder"]"
                      @bind-CurrentValue="formModel.Password" />

        <NetliveField Label="@L["EmailLabel"]"
                      InputType="NetliveInputType.Email"
                      Placeholder="@L["EmailPlaceholder"]"
                      @bind-CurrentValue="formModel.Email" />

        <NetliveTextArea Label="@L["TextLabel"]"
                         Placeholder="@L["TextPlaceholder"]"
                         @bind-CurrentValue="formModel.Text" />

        <NetliveCheckbox Label="@L["TermsLabel"]"
                         @bind-CurrentValue="formModel.AgreeToTerms" />

        <NetliveSelect Label="@L["CountrySelectLabel"]"
                       Items="@Countries"
                       Placeholder="@L["CountrySelectPlaceholder"]"
                       @bind-CurrentValue="formModel.CountryId" />

        <NetliveRadio Label="@L["CountryRadioLabel"]"
                      Items="@Countries"
                      Placeholder="@L["CountrySelectPlaceholder"]"
                      @bind-CurrentValue="formModel.CountryRadioId" />

        <NetliveRadio Label="@L["CountryRadioLabel"]"
                      Items="@Countries"
                      Placeholder="@L["CountrySelectPlaceholder"]"
                      @bind-CurrentValue="formModel.CountryRadioButtonId"
                      Buttons="true" />

        <NetliveDate Label="@L["DateLabel"]"
                     Placeholder="@L["DatePlaceholder"]"
                     @bind-CurrentValue="formModel.Date" />

        <NetliveSwitch Label="@L["Switchlabel"]"
                       Placeholder="@L["SwitchlabelPlaceholder"]"
                       @bind-CurrentValue="formModel.SwitchState" />

        <NetliveAutoComplete Label="@L["AutoCompleteLabel"]"
                             Placeholder="@L["AutoCompletePlaceholder"]"
                             Items="@Countries"
                             @bind-CurrentValue="formModel.CountryAutoCompletedIds" />

        <NetliveFile Label="@L["FileLabel"]"
                     Placeholder="@L["FilePlaceholder"]"
                     @bind-CurrentValue="formModel.File" />

        <NetliveButton Color="NetliveColor.Primary"
                       Clicked="@OnSaveClicked">
            @L["SubmitButton"]
        </NetliveButton>

    </CascadingValue>
</Validations>

<NetliveParagraph>
    <div>Code: @formModel.FirstName</div>
    <div>Password: @formModel.Password</div>
    <div>Email: @formModel.Email</div>
    <div>Text: @formModel.Text</div>
    <div>Country: @formModel.CountryId</div>
    <div>Country Radio: @formModel.CountryRadioId</div>
    <div>Country Radio Button: @formModel.CountryRadioButtonId</div>
    <div>Terms: @formModel.AgreeToTerms</div>
    <div>Date: @formModel.Date</div>
    <div>NetliveAutoComplete: @string.Join(", ", formModel.CountryAutoCompletedIds)</div>
    <div>File: @formModel.File</div>
</NetliveParagraph>

@code {

    private Validations validations;
    private FormModel formModel = new FormModel();

    async Task OnSaveClicked()
    {
        if (await validations.ValidateAll())
        {
            // validation passed
        }
        else
        {
            // validation failed
        }
    }

    public class FormModel
    {
        [Required]
        [StringLength(50, ErrorMessage = "Full Name must be less than 50 characters.")]
        public string FirstName { get; set; } = "";

        [Required]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = "";

        [Required]
        public string Text { get; set; } = "";

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a country")]
        public int CountryId { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a country radio")]
        public int? CountryRadioId { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a country radio")]
        public int? CountryRadioButtonId { get; set; }

        [Required]
        [Range(typeof(bool), "true", "true", ErrorMessage = "The field Is Active must be checked.")]
        public bool AgreeToTerms { get; set; } = false;

        [Required]
        [Range(typeof(bool), "true", "true", ErrorMessage = "The field SwitchState must be switched on")]
        public bool SwitchState { get; set; } = false;

        [Required]
        [DataType(DataType.Date)]
        public DateTime? Date { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a country auto")]
        public List<int> CountryAutoCompletedIds { get; set; } = new();

        [Required]
        [StringLength(50, ErrorMessage = "Full Name must be less than 50 characters.")]
        public string File { get; set; } = "";

    }

    private List<Country> Countries = new List<Country>
    {
        new Country { Id = 1, Name = "USA" },
        new Country { Id = 2, Name = "Canada" }
    };

    public class Country : ISelectableItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }


}