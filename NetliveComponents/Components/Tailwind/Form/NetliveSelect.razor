@using Blazorise
@using NetliveComponents.Mapper.Tailwind
@using NetliveComponents.Models
@using System.Linq.Expressions

@typeparam TItem where TItem : ISelectableItem

<Validation MessageLocalizer="@MessageLocalizer">
    <Field>
        @if (!string.IsNullOrEmpty(Label))
        {
            <FieldLabel>@Label</FieldLabel>
        }
        <FieldBody>
            <Select 
                TValue="int"
                Placeholder="@Placeholder"
                SelectedValue="@CurrentValue"
                SelectedValueChanged="@OnValueChanged"
                SelectedValueExpression="@CurrentValueExpression">

                <ChildContent>
                    <SelectItem Disabled>Please select</SelectItem>
                    @if (Items != null)
                    {
                        foreach (var item in Items)
                        {
                            <SelectItem Value="@item.Id">@item.Name</SelectItem>
                        }
                    }
                </ChildContent>
                <Feedback>
                    <ValidationError />
                </Feedback>
            </Select>                            
        </FieldBody>
    </Field>
</Validation>


@code {
    [Parameter]
    public string Label { get; set; } = "";

    [Parameter]
    public string Placeholder { get; set; } = "";

    [Parameter]
    public int CurrentValue { get; set; }

    [Parameter]
    public ICollection<TItem> Items { get; set; }

    [Parameter]
    public EventCallback<int> CurrentValueChanged { get; set; }

    [Parameter]
    public Expression<Func<int>> CurrentValueExpression { get; set; }

    private async Task OnValueChanged(int newValue)
    {
        CurrentValue = newValue;

        if (CurrentValueChanged.HasDelegate)
        {
            await CurrentValueChanged.InvokeAsync(newValue);
        }
    }

    [CascadingParameter]
    public Func<string, IEnumerable<string>, string> MessageLocalizer { get; set; }


}
