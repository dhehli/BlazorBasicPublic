@using Blazorise
@using NetliveComponents.Mapper.Tailwind
@using NetliveComponents.Models

<Field>
    @if (!string.IsNullOrEmpty(Label))
    {
        <FieldLabel>@Label</FieldLabel>
    }

    <FilePicker Multiple Upload="OnFileUpload" ShowMode="FilePickerShowMode.List" />

    @if (ValidationErrorMessage != null)
    {
        <ValidationError>@ValidationErrorMessage</ValidationError>
    }
</Field>

@code {
    [Parameter]
    public string Label { get; set; } = "";

    [Parameter]
    public string Placeholder { get; set; } = "";

    [Parameter]
    public string CurrentValue { get; set; }

    [Parameter]
    public EventCallback<string> CurrentValueChanged { get; set; }

    [Parameter]
    public Func<string, bool> Validation { get; set; }

    [Parameter]
    public string ValidationErrorMessage { get; set; } = "null";


    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentValueChanged.HasDelegate)
        {
            await CurrentValueChanged.InvokeAsync(CurrentValue);
        }
    }

    async Task OnFileUpload(FileUploadEventArgs e)
    {
        try
        {
            using (MemoryStream result = new MemoryStream())
            {
                await e.File.OpenReadStream(long.MaxValue).CopyToAsync(result);
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }

    }
}